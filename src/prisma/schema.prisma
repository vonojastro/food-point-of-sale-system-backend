// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Category {
    id           String   @id @default(cuid())
    posType      String
    categoryName String
    userId       String?
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "categories")
}

model FoodProduct {
    id        String   @id @default(cuid())
    name      String
    details   String?
    price     Float
    stock     Int
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
    category  String?
    userId    String?

    @@map(name: "foodProducts")
}

model DefaultProduct {
    id              String   @id @default(cuid())
    productName     String
    brand           String?  @default("None")
    description     String?  @default("None")
    supplier        String?  @default("None")
    storageLocation String?  @default("None")
    costPerUnit     Float    @default(0)
    retailPrice     Float    @default(0)
    wholesalePrice  Float?   @default(0)
    stock           Int      @default(0)
    unit            String
    createdAt       DateTime @default(now()) @map(name: "created_at")
    updatedAt       DateTime @updatedAt @map(name: "updated_at")
    userId          String?

    @@map(name: "defaultProducts")
}

model PaymentType {
    id          String @id @default(cuid())
    paymentType String

    @@map(name: "payment_type")
}

model Order {
    orderId     String      @id @default(cuid())
    posType     String
    paymentType String
    userId      String?
    createdAt   DateTime    @default(now()) @map(name: "created_at")
    updatedAt   DateTime    @updatedAt @map(name: "updated_at")
    totalAmount Float
    items       OrderItem[]

    @@map(name: "orders")
}

model OrderItem {
    id          String   @id @default(cuid())
    quantity    Int
    subtotal    Float
    createdAt   DateTime @default(now()) @map(name: "created_at")
    updatedAt   DateTime @updatedAt @map(name: "updated_at")
    productId   String?
    productName String
    description String?
    Order       Order?   @relation(fields: [orderId], references: [orderId])
    orderId     String?

    @@map(name: "order_item")
}

model User {
  id              String             @id @default(cuid())
  clerkId         String
  username        String?            @unique
  password        String?            @map(name: "hashed_password")
  email           String?            @unique
  createdAt       DateTime           @default(now()) @map(name: "created_at")
  userType        String             @default("Admin") // Default value set to "Admin"  createdAt       DateTime           @default(now()) @map(name: "created_at")
  updatedAt       DateTime           @updatedAt @map(name: "updated_at")
  Employee        Employee[]         // Removed "?" for optional list
  stores          Store[]            // Removed "?" for optional list
  subscriptions   UserSubscription[] // Removed "?" for optional list

  @@map(name: "users")
}

model SubscriptionType {
  id              String             @id @default(cuid())
  name            String             @unique
  price           Float
  durationMonths  Int                // Duration of the subscription in months
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  users           UserSubscription[] // Relation with UserSubscription model
}

model Store {
  id              String             @id @default(cuid())
  name            String
  address         String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  userId          String
  user            User               @relation(fields: [userId], references: [id])

  @@map(name: "stores")
}

model UserSubscription {
  id              String             @id @default(cuid())
  userId          String
  subscriptionId  String
  startDate       DateTime           @default(now())
  endDate         DateTime?
  user            User               @relation(fields: [userId], references: [id])
  subscription    SubscriptionType   @relation(fields: [subscriptionId], references: [id])

  @@map(name: "user_subscriptions")
}



model Employee {
    id           String    @id @default(cuid())
    email        String?
    password     String?   @default("0000") @map(name: "hashed_password")
    employeeName String
    position     String    @default("Unassigned")
    scheduleDay  String[]
    scheduleTime String[]
    dateHired    DateTime?
    isHired      Boolean
    User         User?     @relation(fields: [userId], references: [id])
    userId       String?

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "employees")
}

model Cash {
    cashId       String @id @default(cuid())
    startingCash Float  @default(0)
    cashAdded    Float  @default(0)
    totalSales   Float  @default(0)

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "cash")
}

model CashSale {
    incomeId String @id @default(cuid())
    cashSale Float  @default(0)

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "cash_sale")
}

model NonCashSale {
    incomeId    String @id @default(cuid())
    nonCashSale Float  @default(0)

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "non_cash_sale")
}

model Expense {
    expenseId      String  @id @default(cuid())
    posType        String
    userId         String?
    amount         Float
    description    String
    subDescription String?

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "expense")
}

model CashAdded {
    incomeId       String  @id @default(cuid())
    posType        String
    userId         String?
    amount         Float
    description    String
    subDescription String?

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "cash_added")
}

model EmployeeAttendance {
    attendanceId String   @id @default(cuid())
    posType      String
    userId       String?
    employeeId   String
    date         DateTime
    startTime    DateTime
    endTime      DateTime
    status       String
    remarks      String?

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "employee_attendance")
}

model scheduleDefault {
    ruleId       String   @id @default(cuid())
    posType      String
    userId       String?
    scheduleName String
    description  String
    startTime    String
    endTime      String
    daysOfWeek   String[]

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "schedule_default")
}
